@{
    ViewData["Title"] = "Scheduled Tasks API Demo";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    <p>This page demonstrates the Scheduled Tasks API functionality.</p>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>API Endpoints</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item"><strong>POST</strong> /api/scheduledtasks - Create a new task</li>
                        <li class="list-group-item"><strong>GET</strong> /api/scheduledtasks - Get all tasks</li>
                        <li class="list-group-item"><strong>GET</strong> /api/scheduledtasks/{id} - Get a specific task</li>
                        <li class="list-group-item"><strong>PUT</strong> /api/scheduledtasks/{id} - Update a task</li>
                        <li class="list-group-item"><strong>PATCH</strong> /api/scheduledtasks/{id}/status - Update task status</li>
                        <li class="list-group-item"><strong>DELETE</strong> /api/scheduledtasks/{id} - Delete a task</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Quick Test</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary" onclick="createSampleTask()">Create Sample Task</button>
                    <button class="btn btn-info" onclick="getAllTasks()">Get All Tasks</button>
                    <button class="btn btn-success" onclick="triggerTask()">Trigger Last Task</button>
                    <button class="btn btn-secondary" onclick="getStats()">Get Stats</button>
                    <button class="btn btn-warning" onclick="clearResults()">Clear Results</button>
                    
                    <div class="mt-3">
                        <h6>Results:</h6>
                        <pre id="results" class="bg-light p-2" style="max-height: 300px; overflow-y: auto;"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="alert alert-info">
                <h6>Task Execution Features:</h6>
                <ul class="mb-0">
                    <li><strong>Automatic Execution:</strong> Tasks are automatically executed when their scheduled time arrives</li>
                    <li><strong>Manual Trigger:</strong> Use the "Trigger Last Task" button to manually execute a task</li>
                    <li><strong>Background Service:</strong> A background service monitors for due tasks every 5 seconds</li>
                    <li><strong>Task Types:</strong> ReserveBuntzen tasks are supported</li>
                    <li><strong>Concurrent Execution:</strong> Up to 5 tasks can run simultaneously</li>
                    <li><strong>Status Tracking:</strong> Tasks progress through Pending ‚Üí Running ‚Üí Completed/Failed states</li>
                </ul>
            </div>
        </div>
    </div>
    
    <div class="row mt-2">
        <div class="col-12">
            <div class="alert alert-success">
                <h6>API Documentation:</h6>
                <p>Visit <a href="/api-docs" target="_blank">/api-docs</a> to view the complete Swagger documentation for the API.</p>
            </div>
        </div>
    </div>
</div>

<script>
    let lastCreatedTaskId = null;

    function logResult(message, data = null) {
        const results = document.getElementById('results');
        const timestamp = new Date().toLocaleTimeString();
        let logEntry = `[${timestamp}] ${message}`;
        
        if (data) {
            logEntry += '\n' + JSON.stringify(data, null, 2);
        }
        
        results.textContent += logEntry + '\n\n';
        results.scrollTop = results.scrollHeight;
    }

    function clearResults() {
        document.getElementById('results').textContent = '';
    }

    async function createSampleTask() {
        try {
            // Only ReserveBuntzen tasks are supported now
            const randomType = 'ReserveBuntzen';
            
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 30) + 1); // 1-30 days from now
            
            const sampleTask = {
                name: "Buntzen Lake Reservation",
                description: "Automated Buntzen Lake recreation area reservation",
                scheduledTime: new Date(Date.now() + Math.random() * 1800000).toISOString(), // Random time within 30 minutes
                taskType: "ReserveBuntzen",
                parameters: JSON.stringify({ 
                    Date: futureDate.toISOString().split('T')[0],
                    AuthToken: "BL_TOKEN_" + Math.random().toString(36).substring(2, 15)
                }),
                priority: Math.floor(Math.random() * 3) + 1,
                createdBy: "API Demo"
            };

            const response = await fetch('/api/scheduledtasks', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(sampleTask)
            });

            if (response.ok) {
                const result = await response.json();
                lastCreatedTaskId = result.Id;
                logResult(`‚úÖ ${randomType} task created successfully:`, result);
            } else {
                const error = await response.text();
                logResult('‚ùå Error creating task:', error);
            }
        } catch (error) {
            logResult('‚ùå Network error:', error.message);
        }
    }

    async function getAllTasks() {
        try {
            const response = await fetch('/api/scheduledtasks');
            
            if (response.ok) {
                const tasks = await response.json();
                logResult(`üìã Retrieved ${tasks.length} task(s):`, tasks);
                
                // Store the last task ID for triggering
                if (tasks.length > 0) {
                    lastCreatedTaskId = tasks[tasks.length - 1].Id;
                }
            } else {
                const error = await response.text();
                logResult('‚ùå Error getting tasks:', error);
            }
        } catch (error) {
            logResult('‚ùå Network error:', error.message);
        }
    }

    async function triggerTask() {
        if (!lastCreatedTaskId) {
            logResult('‚ÑπÔ∏è No task ID available. Create a task first or get all tasks.');
            return;
        }

        try {
            logResult(`üöÄ Triggering execution of task ${lastCreatedTaskId}...`);
            
            const response = await fetch(`/api/taskexecution/trigger/${lastCreatedTaskId}`, {
                method: 'POST'
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.Success) {
                    logResult(`‚úÖ Task ${lastCreatedTaskId} executed successfully:`, result);
                } else {
                    logResult(`‚ùå Task ${lastCreatedTaskId} execution failed:`, result);
                }
            } else {
                const error = await response.text();
                logResult(`‚ùå Error triggering task ${lastCreatedTaskId}:`, error);
            }
        } catch (error) {
            logResult('‚ùå Network error:', error.message);
        }
    }

    async function getStats() {
        try {
            const response = await fetch('/api/taskexecution/stats');
            
            if (response.ok) {
                const stats = await response.json();
                logResult('üìä Execution Statistics:', stats);
            } else {
                const error = await response.text();
                logResult('‚ùå Error getting stats:', error);
            }
        } catch (error) {
            logResult('‚ùå Network error:', error.message);
        }
    }
</script>
